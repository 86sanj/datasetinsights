variables:
  GCP_SDK_VERSION: 287.0.0
  DOCKER_VERSION: 19.03.8
  DOCKERHUB_URI: unitytechnologies/datasetinsights

stages:
  - tests
  - build
  - publish

run-tests:
  image: python:3.7
  script:
    - curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
    - $HOME/.poetry/bin/poetry config virtualenvs.create false
    - $HOME/.poetry/bin/poetry install
    - python -m pytest
  stage: tests
  only:
    - master
    - merge_requests

run-linter:
  image: python:3.7
  script:
    - pip install flake8
    - flake8 --statistics --show-source
  stage: tests
  only:
    - master
    - merge_requests

build-docker:
  image: docker:${DOCKER_VERSION}
  stage: build
  before_script:
    - apk add --update make
  script:
    - make build
  only:
    - master
    - merge_requests

publish-docker-test:
  image: google/cloud-sdk:${GCP_SDK_VERSION}
  stage: publish
  before_script:
    - apt-get install make
    # Authenticate using the service account stored in Gitlab variable:
    - echo ${GITLAB_SERVICE_ACCOUNT} > ${CI_PROJECT_DIR}/gitlab-service-account.json
    - gcloud auth activate-service-account --key-file ${CI_PROJECT_DIR}/gitlab-service-account.json
    - gcloud auth configure-docker
  script:
    # docker with the current git commit sha as tag
    - TAG=pr_$CI_COMMIT_SHA make build
    - TAG=pr_$CI_COMMIT_SHA make push
  only:
    - merge_requests

publish-docker-cannonical:
  image: google/cloud-sdk:${GCP_SDK_VERSION}
  stage: publish
  before_script:
    - apt-get install make
    # Authenticate using the service account stored in Gitlab variable:
    - echo ${GITLAB_SERVICE_ACCOUNT} > ${CI_PROJECT_DIR}/gitlab-service-account.json
    - gcloud auth activate-service-account --key-file ${CI_PROJECT_DIR}/gitlab-service-account.json
    - gcloud auth configure-docker
  script:
    # docker with latest tag
    - TAG=latest make build
    - TAG=latest make push
    # docker with the current git commit sha as tag
    - TAG=$CI_COMMIT_SHA make build
    - TAG=$CI_COMMIT_SHA make push
  only:
    - master

publish-dockerhub:
  image: docker:${DOCKER_VERSION}
  stage: publish
  before_script:
    - docker login --username=${DOCKERHUB_USER} --password=${DOCKERHUB_TOKEN}
  script:
    - docker pull ${DOCKERHUB_URI}:latest
    - docker build -t datasetinsights:${CI_COMMIT_TAG} .
    - docker tag datasetinsights:${CI_COMMIT_TAG} ${DOCKERHUB_URI}:latest
    - docker tag datasetinsights:${CI_COMMIT_TAG} ${DOCKERHUB_URI}:${CI_COMMIT_TAG}
    - docker push ${DOCKERHUB_URI}:latest
    - docker push ${DOCKERHUB_URI}:${CI_COMMIT_TAG}
  only:
    - tags

publish-pypi:
  image: python:3.7
  stage: publish
  before_script:
    - python -m pip install --upgrade pip poetry
  script:
    - poetry config pypi-token.pypi $PYPI_TOKEN
    - poetry version $CI_COMMIT_TAG
    - poetry build
    - poetry publish
  only:
    - tags
